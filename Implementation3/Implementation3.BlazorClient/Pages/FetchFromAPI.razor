@page "/fetchapi"

<PageTitle>Fetch Web API Data (Polling)</PageTitle>

@using Microsoft.AspNetCore.SignalR.Client
@using System.Text.Json
@using SharedLibrary
@inject IHttpClientFactory HttpClientFactory
@implements IDisposable

<h1>Fetch Web API Data (Polling)</h1>

<p>This component demonstrates fetching data from an API using polling.</p>

@if (results == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm EditContext=context OnValidSubmit=Send>
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div>
            <label>
                First name:
                <InputText @bind-Value=input.First class="form-control" />
            </label>
            <label>
                Last name:
                <InputText @bind-Value=input.Last class="form-control" />
            </label>
        </div>
        <div>
            <label>
                Start counter:
                <InputNumber @bind-Value=input.Start class="form-control" />
            </label>
            <label>
                End counter:
                <InputNumber @bind-Value=input.End class="form-control" />
            </label>
            <label>
                Minimum delay:
                <InputNumber @bind-Value=input.MinDelaySeconds class="form-control" />
            </label>
            <label>
                Maximum delay:
                <InputNumber @bind-Value=input.MaxDelaySeconds class="form-control" />
            </label>
        </div>
        <br/>
        <button type="submit" disabled="@(!CanRequestData)">Get Data</button>
        <button type="button" disabled="@(!CanCloseConnection)" @onclick=CloseConnection>Close Connection</button>
    </EditForm>
    <br />
    <div>
        <p>Connection Status: <b class="red">@connectionStatus</b></p>
        <p>Current Calculation: <b class="red">@CurrentStatus</b></p>
        <p>Current Progress: <b class="red">@CurrentProgress%</b></p>
    </div>
    <table class="table">
        <thead>
            <tr>
                <th>Status</th>
                <th>Result</th>
                <th>Progress</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var result in results)
            {
                <tr>
                    <td>@result.Status</td>
                    <td>@result.Result</td>
                    <td>@result.Progress%</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private PeriodicTimer? timer;
    private HttpClient? client;
    private Guid id;
    private ClientConnectionStatus connectionStatus;

    private EditContext? context;
    private List<StatusObject> results = new();
    private CancellationTokenSource cts = new();
    private CalculatorInput input = new(string.Empty, string.Empty);

    private StatusType CurrentStatus;
    private double CurrentProgress;

    private bool CanRequestData => !string.IsNullOrWhiteSpace(input.First) && !string.IsNullOrWhiteSpace(input.Last);
    private bool CanCloseConnection => connectionStatus == ClientConnectionStatus.Connected;

    private async Task Send()
    {
        if (client is not null && timer is not null)
        {
            if (connectionStatus == ClientConnectionStatus.Connected)
            {
                await CloseConnection();
            }

            results.Clear();
            var response = await client.PostAsJsonAsync("/startcalculation", input, cts.Token);
            var obj = await response.Content.ReadFromJsonAsync<CreateSequenceResponse>();

            if (obj != null)
                id = obj.Id;

            connectionStatus = ClientConnectionStatus.Connected;
            timer = new(TimeSpan.FromSeconds(2));

            try
            {
                while (await timer.WaitForNextTickAsync(cts.Token))
                {
                    await ProcessStatus();
                }
            }
            catch (OperationCanceledException)
            {
            }
        }
    }

    private async Task ProcessStatus()
    {
        if (client is not null)
        {
            var response = await client.GetAsync($"/getstatus/{id}");
            StatusObject? status = null;

            if (response.StatusCode == System.Net.HttpStatusCode.OK)
                status = await response.Content.ReadFromJsonAsync<StatusObject>();

            if (status is not null)
            {
                if (status.Status != StatusType.Started)
                    results.Add(status);
                CurrentStatus = status.Status;
                CurrentProgress = status.Progress;
                if (status.Status == StatusType.Completed)
                    cts.Cancel();

                StateHasChanged();
            }
        }
    }

    private async Task CloseConnection()
    {
        try
        {
            // Send the signal to cancel waiting
            cts.Cancel();

            // Reboot the CancellationTokenSource for re-use
            cts.Dispose();
            cts = new();

            timer?.Dispose();
            connectionStatus = ClientConnectionStatus.Disconnected;
            CurrentStatus = StatusType.Cancelled;
        }
        catch (Exception)
        {
        }
    }

    protected override async Task OnInitializedAsync()
    {
        context = new(input);
        timer = new(TimeSpan.FromSeconds(2));
        client = HttpClientFactory.CreateClient();
        client.BaseAddress = new Uri("https://localhost:7276/");
    }

    public void Dispose()
    {
        if (timer is not null)
        {
            timer.Dispose();
        }
        if (client is not null)
        {
            client.Dispose();
        }
    }
}
